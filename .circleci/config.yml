# This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
version: 2.1

aliases:
  - &docker
    - image: circleci/node:16.10

  - &environment
    GITHUB_TOKEN: $GH_TOKEN_SEMANTIC_RELEASE

  - &restore_yarn_cache
    restore_cache:
      name: Restore yarn cache
      key: v2-node-{{ arch }}-{{ checksum "yarn.lock" }}-yarn

  - &restore_node_modules
    restore_cache:
      name: Restore node_modules cache
      keys:
        - v2-node-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}-node-modules

  - &TEST_PARALLELISM 20

jobs:
  setup:
    docker: *docker
    steps:
      - checkout
      - run:
          name: Nodejs Version
          command: node --version
      - *restore_yarn_cache
      - run:
          name: Install Packages
          command: yarn --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          # Store the yarn cache globally for all lock files with this same
          # checksum. This will speed up the setup job for all PRs where the
          # lockfile is the same.
          name: Save yarn cache for future installs
          key: v2-node-{{ arch }}-{{ checksum "yarn.lock" }}-yarn
          paths:
            - ~/.cache/yarn
      - save_cache:
          # Store node_modules for all jobs in this workflow so that they don't
          # need to each run a yarn install for each job. This will speed up
          # all jobs run on this branch with the same lockfile.
          name: Save node_modules cache
          # This cache key is per branch, a yarn install in setup is required.
          key: v2-node-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}-node-modules
          paths:
            - node_modules

  format_lint_check_types:
    docker: *docker
    steps:
      - checkout
      - *restore_node_modules
      - run: yarn format
      - run: yarn lint
      - run: yarn check-types

  unit_tests:
    docker: *docker
    parallelism: *TEST_PARALLELISM
    steps:
      - checkout
      - *restore_node_modules
      - run:
          name: Unit tests
          command: yarn run test:ci
      - store_test_results:
          path: ./coverage

  build:
    docker: *docker
    environment: *environment
    steps:
      - checkout
      - *restore_node_modules
      - run:
          name: Next build
          command: yarn build
      # - when:
      #     condition:
      #       equal: [main, << pipeline.git.branch >>]
      #     steps:
      #       - *restore_node_modules
      #       - run: echo $GH_TOKEN_SEMANTIC_RELEASE
      #       - run:
      #           name: Semantic release ðŸš€
      #           command: yarn release

workflows:
  build_and_test:
    jobs:
      - setup
      - format_lint_check_types:
          requires:
            - setup
      - unit_tests:
          requires:
            - setup
      - build:
          requires:
            - setup
            - unit_tests
